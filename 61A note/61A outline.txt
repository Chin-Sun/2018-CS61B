1. Functions--basic
2. Control------------
	Print and None;
	Miscellaneous Python Features; 
	Conditional Statement;
	Iteration;
	Return;
	Designing Functions;
3. Higher-Order Functions-------
	Higher-Order Functions: General patterns with assignments and computational process；
	Return a functions as Return Values: Locally Defined function；
	One example;
	Function Composition: compose two or more functions into one expression to achieve them
        Function Currying: multiple-functions--->one single higher-function
	Abstraction: The rule of name function and value -->easily understand;
			f,g,h - Function
			x,y,z - Real number
			n,k,i - Integers
**********************************************************************************
4. Environment Diagram--------
	Multiple Environments: how multiple functions work in one environments;
	Environments for Higher-Order Functions: how it works
        One example↑
	Environments for Nested Definitions: how to draw an Environment Diagram
	Local Names: local function without being nested in the parent of function (no def within def)
	Lambda Expressions: square = lambda x: x*x        vs. def statements
	Self Reference: more clear explaination about the environment diagram
	Decorator: @higher_function
5. Recursion------------------
	Recursional Functions: defination
	Recursion in Environment Diagrams：how it work in environment diagram
	Mutual Recursion: two functions use each other;  
	Recursion and Iteration: how to convert one to another one;  
	Order of Recursive calls: Without return stataement---> return value=None ---> return to the former frame to execute-->(f4-->f3-->f2-->f1-->global)； 
put the base function first + make programmer easier to read for others;  
	One example↑
6. Tree Recursion----------
	Tree Recursion: more than once to call this function within its body.
	One example↑
	Implementating Functions:
************************************************************************************  
7. Sequence & Data Abstraction-----------  
	Lists: digits=[1,2,4]----->digit[0]=1  
	Containers: in; not in;   
	For Sequence: for <name> in <expression>:  
			  <suite>  
	Ranges: range(starting_value, ending_value)---->length is ending_value-starting_value; element = starting_value ~ index[length - 1];  
	List Compresions: [x+1 for x in range(2,n) if n%x==0];  
	Strings: length; sequence; in& not in  
	Data Abstraction: ----rational numbers----rational(n,d)=n/d; numer(x)=n; denom(x)=d;  
	Representing Rational Numbers: change functions;  
	Abstraction Barriers: write your program in a modular way.
	Data Representations: data abstration by its behavior
	Dictionaries: dict= {'X':2, 'Y':3 }; dict['X']
	Lists: s.append(t); s.extend(t); a=s+[t]; b=s[1:4]; s[1:0]=t; t=s.pop(t); t.remove(5);  
8. Functional Decomposition & Debugging------------  
	Exceptions: one type of bug; can be handled by python itself;
	Raising Exceptions: AssertionError----- python3 -0---__debug__; TypeError; NameErroe; KeyError; RunTimeError;  
	Try Statements:   def f(x):
				try:
				    return g(x)
				except NameError as e: # e是错误指令的提示
				    print('Handling', e)
	Example: Reduce-----结合了try statement
9. Trees
10. Mutable Sequences：
**********************************************************************************
11. Mutable Functions:  
	Non-local assignment:
	non-local assignment example:  
	Multiple mutable functions:  
	One example↑
（我需要训练自己的程序化思维，也就是看到代码后，脑子里可以environment diagram一样运行一步步得出代码的结果。这种思维可以促进你为某功能严谨地写出一条一条代码。） 写代码的时候也可以使用https://pythontutor.com/visualize.html#mode=edit 这个网站去看程序一步步如何运行的，进而熟悉程序的运行顺序。
12. Iterators& Generators
	Iterators: iterators create a container for the list
	Dictionary Iterator: iterator create a container for a dictionary's keys, values or items
	For Statements: iterator can only output once under "for statements". But range can use multiple times.
	Built-in Iterator Functions: lazy
	Generator: yield multiple times instead of returning
	Generators& Iterators: combined;
13. Objects  
	Objects-Oriented Programm: objects & class
	Class Statements: new instance for the same object Class class_name
	Methods: def deposite(self. amount)
14. Inheritance
	<expression>.<name>-------<class>.<attribute>
	integer
	multiple inheritance
15. Linked Lists& Trees
	Linked lists: class_link.rest.rest.first
	@proprety; @attribute_name.settor
	Tree Class: 讲解tree---没听懂
	Measuring Efficiency:---测运行速度
	Memorization: 加快运行时间
	Exponentiation: linear time & logarithmic time
	Tress& link ex
16. Interfaces
	String Representations: str(); eval(repr())
	Polymorphic Functions: 
几乎没看懂， 烦死啊啊啊啊啊啊----过一遍算了。因为我还得看61B
17. Scheme
	Scheme: new language which Python is based on
	Special Forms: 
	Scheme Interpreter:
	Lambda Expressions: 
	Lists: 
	Symbolic Programming:
	Example: Sierpinski's Triangle:
	Programming Language:




	

	
	
	





				
