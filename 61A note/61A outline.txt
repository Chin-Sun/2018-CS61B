1. Functions--basic
2. Control------------
	Print and None;
	Miscellaneous Python Features; 
	Conditional Statement;
	Iteration;
	Return;
	Designing Functions;
3. Higher-Order Functions-------
	Higher-Order Functions: General patterns with assignments and computational process；
	Return a functions as Return Values: Locally Defined function；
	One example;
	Function Composition: compose two or more functions into one expression to achieve them
        Function Currying: multiple-functions--->one single higher-function
	Abstraction: The rule of name function and value -->easily understand;
			f,g,h - Function
			x,y,z - Real number
			n,k,i - Integers
**********************************************************************************
4. Environment Diagram--------
	Multiple Environments: how multiple functions work in one environments;
	Environments for Higher-Order Functions: how it works
        One example↑
	Environments for Nested Definitions: how to draw an Environment Diagram
	Local Names: local function without being nested in the parent of function (no def within def)
	Lambda Expressions: square = lambda x: x*x        vs. def statements
	Self Reference: more clear explaination about the environment diagram
	Decorator: @higher_function
5. Recursion------------------
	Recursional Functions: defination
	Recursion in Environment Diagrams：how it work in environment diagram
	





				